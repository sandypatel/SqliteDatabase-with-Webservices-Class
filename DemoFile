#pragma mark - callUserFriendList Webservice
-(void)callUserFriendListWebservice{
    self.view.userInteractionEnabled=false;
    //[SVProgressHUD showWithStatus:@"Loading
    NSString *strUrl=@"http://stroller.alakmalak.net/webservice/pm/signup_service.php";
    ASIFormDataRequest *request = [ASIFormDataRequest requestWithURL:[NSURL URLWithString:strUrl]];
    [request setPostValue:[[arrUserId objectAtIndex:0] valueForKey:@"user_id"] forKey:@"user_id"];
    [request setPostValue:[[arrUserId objectAtIndex:0]valueForKey:@"id"] forKey:@"id"];
    [request setDelegate:self];
    [request setDidFinishSelector:@selector(requestFinishedsforUserFrendList:)];
    [request setDidFailSelector:@selector(requestWebserviceFailedforUserFrendList:)];
    [request startAsynchronous];
}
- (void)requestFinishedsforUserFrendList:(ASIHTTPRequest*)request {
    self.view.userInteractionEnabled=true;
    NSString *Result = [request responseString];
    NSLog(@"%@",Result);
    NSError *error;
    SBJSON *json = [SBJSON new];
    arrFriend = [json objectWithString:Result error:&error];
    NSLog(@"%@",arrFriend);
    if (![arrFriend count]>0) {
        [self hideViews];
    }else{
        Cell.btnFriendDelete.hidden=NO;
        Cell.lblUserName.hidden=NO;
        Cell.lblTotalNoMsg.hidden=NO;
        if (checkComposeReply==333) {
            tblForwordFrendName.dataSource = self;
            tblForwordFrendName.delegate = self;
            [tblForwordFrendName reloadData];
        }else{
             [tblFriend reloadData];
        }
    }
}
-(void)requestWebserviceFailedforUserFrendList:(ASIHTTPRequest *)request
{
    NSLog(@"Fail");
    [SVProgressHUD dismissWithError:@"Connection failed"];
    self.navigationController.navigationBar.userInteractionEnabled=true;
    [self.view setUserInteractionEnabled:YES];
    UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"Friend List" message:@"Connection fail.Please turn on internet connection" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Reload", nil];
    [alert show];
}

// For table Use

#pragma mark - tableView DelegateMethods
#pragma mark - tableView heightForRowAtIndexPath
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath;
{
    return 92;
}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return [arrUserList count];
}
#pragma mark - tableView cellForRowAtIndexPath
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"SettingUserCell";
    
    cell = (SettingUserCell *)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        NSArray *nib = [[NSBundle mainBundle] loadNibNamed:CellIdentifier owner:self options:nil];
        cell = (SettingUserCell *)[nib objectAtIndex:0];
    }
    cell.selectionStyle=UITableViewCellSelectionStyleNone;
    if(tableView == tblMinutesLimites){
        cell.txtMinutes.delegate=self;
        cell.lblUserName.text = [[arrUserList objectAtIndex:indexPath.row] valueForKey:@"name"];
        cell.lblTotalMinutes.text = [[arrUserList objectAtIndex:indexPath.row] valueForKey:@"min_limit"];
        cell.txtMinutes.text = [[arrUserList objectAtIndex:indexPath.row] valueForKey:@"min_limit"];
        cell.txtMinutes.tag=indexPath.row;
        btnSetMinutes.tag=indexPath.row;
        myFlag = [[arrUserList objectAtIndex:indexPath.row] valueForKey:@"min_limit_change"];
        if ([arrUserList count]>0)
        {
            [cell.btnMinus addTarget:self action:@selector(SetMinusPlus:) forControlEvents:UIControlEventTouchUpInside];
            [cell.btnPlus addTarget:self action:@selector(SetMinusPlus:) forControlEvents:UIControlEventTouchUpInside];
            [cell.btnCheckUser addTarget:self action:@selector(btnCheckUserForMinutesLimites:) forControlEvents:UIControlEventTouchUpInside];
            
            cell.btnPlus.tag=indexPath.row;
            cell.btnMinus.tag=indexPath.row;
            cell.btnCheckUser.tag=indexPath.row;
        }
        if ([[[arrUserList objectAtIndex:indexPath.row]valueForKey:@"min_limit_change"]isEqualToString:@"0"]) {
            [cell.btnCheckUser setSelected:NO];
            cell.btnMinus.enabled=NO;
            cell.btnPlus.enabled=NO;
            cell.txtMinutes.enabled=NO;
            cell.btnCheckUser.imageView.image=[UIImage imageNamed:@"Setting_uncheck_off.png"];
        }
        else if([[[arrUserList objectAtIndex:indexPath.row]valueForKey:@"min_limit_change"]isEqualToString:@"1"]){
            [cell.btnCheckUser setSelected:YES];
            cell.btnMinus.enabled=YES;
            cell.btnPlus.enabled=YES;
            cell.txtMinutes.enabled=YES;
            [cell.btnCheckUser setImage:[UIImage imageNamed:@"Setting_check_on.png"] forState:UIControlStateNormal];
        }else{
            [cell.btnCheckUser setSelected:NO];
            cell.btnMinus.enabled=NO;
            cell.btnPlus.enabled=NO;
            cell.txtMinutes.enabled=NO;
            cell.btnCheckUser.imageView.image=[UIImage imageNamed:@"Setting_uncheck_off.png"];
        }
    }
    return cell;
}
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    /*if(tableView == tblSendMail){
     [tblSendMail reloadData];
     }
     else if(tableView == tblMsgLimites){
     [tblMsgLimites reloadData];
     }
     else if(tableView == tblMinutesLimites){
     [tblMinutesLimites reloadData];
     }
     else if(tableView == tblEnableDisable){
     [tblEnableDisable reloadData];
     }
     else{
     //(@"No table are Reload");
     }*/
}
#pragma mark - Check User's check ON or OFF
-(void)btnCheckUserForMinutesLimites:(id)sender{
    //(@"%d",[sender tag]);
    NSIndexPath *myIP = [NSIndexPath indexPathForRow:[sender tag] inSection:0];
    SettingUserCell *cellX = (SettingUserCell*)[tblMinutesLimites cellForRowAtIndexPath:myIP];
    //(@"%d",[cellX.btnCheckUser tag]);
    UIButton *btn = sender;
    if (btn.selected) {
        [btn setSelected:NO];
        [btn setImage:[UIImage imageNamed:@"Setting_uncheck_off.png"] forState:UIControlStateNormal];
        cellX.btnMinus.enabled=NO;
        cellX.btnPlus.enabled=NO;
        cellX.txtMinutes.enabled=NO;
        //strType=@"0";
        [[arrUserList objectAtIndex:[sender tag]]setValue:@"0" forKey:@"min_limit_change"];
        btnSetMinutes.tag=[cellX.btnCheckUser tag];
    }else{
        [btn setSelected:YES];
        [btn setImage:[UIImage imageNamed:@"Setting_check_on.png"] forState:UIControlStateNormal];
        cellX.btnMinus.enabled=YES;
        cellX.btnPlus.enabled=YES;
        cellX.txtMinutes.enabled=YES;
        //strType=@"1";
        [[arrUserList objectAtIndex:[sender tag]]setValue:@"1" forKey:@"min_limit_change"];
        btnSetMinutes.tag=[cellX.btnCheckUser tag];
    }
}

// Scrollview Details 

#pragma mark - set up initial parameter
-(void)setUpInitialParameter:(int)index
{
    //(@"%d",index);
    NSIndexPath *myIP = [NSIndexPath indexPathForRow:index inSection:0];
    SettingUserCell *cellX = (SettingUserCell*)[tblMinutesLimites cellForRowAtIndexPath:myIP];
    UIToolbar *numberToolbar = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 35)];
    numberToolbar.barStyle = UIBarStyleDefault;
    numberToolbar.items = [NSArray arrayWithObjects:
                           [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                           [[UIBarButtonItem alloc]initWithTitle:@"Cancel" style:UIBarButtonItemStylePlain target:self action:@selector(doneWithNumberPad)],
                           nil];
    [numberToolbar sizeToFit];
    cellX.txtMinutes.inputAccessoryView = numberToolbar;
}
-(void)doneWithNumberPad{
    if (!IS_IPHONE_5) {
        [self.view endEditing:NO];
        [cell.txtMinutes resignFirstResponder];
        scrMainview.frame=CGRectMake(0, 43, 320, 480);
        [UIView beginAnimations:nil context:nil];
        [UIView setAnimationDuration:.3];
        [UIView setAnimationBeginsFromCurrentState:TRUE];
        scrMainview.contentSize=CGSizeMake(282, 432);
        [scrMainview setContentOffset:CGPointMake(0,0) animated:YES];
        [UIView commitAnimations];
    }else{
        [self.view endEditing:NO];
        [cell.txtMinutes resignFirstResponder];
        scrMainview.frame=CGRectMake(0, 43, 320, 480);
        [UIView beginAnimations:nil context:nil];
        [UIView setAnimationDuration:.3];
        [UIView setAnimationBeginsFromCurrentState:TRUE];
        scrMainview.contentSize=CGSizeMake(282, 432);
        [scrMainview setContentOffset:CGPointMake(0,0) animated:YES];
        [UIView commitAnimations];
    }
}
// Textfield Method
- (void)textFieldDidBeginEditing:(UITextField *)textField {
    //(@"%d",[textField tag]);
    btnSetMinutes.tag=textField.tag;
    [self setUpInitialParameter:[textField tag]];
    if (!IS_IPHONE_5) {
        scrMainview.contentSize=CGSizeMake(282, 690);
        [UIView beginAnimations:nil context:nil];
        [UIView setAnimationDuration:.3];
        [UIView setAnimationBeginsFromCurrentState:TRUE];
        [scrMainview setContentOffset:CGPointMake(0,textField.center.y+140) animated:YES];
        [UIView commitAnimations];
    }else{
        scrMainview.contentSize=CGSizeMake(282, 690);
        [UIView beginAnimations:nil context:nil];
        [UIView setAnimationDuration:.3];
        [UIView setAnimationBeginsFromCurrentState:TRUE];
        [scrMainview setContentOffset:CGPointMake(0,textField.center.y+140) animated:YES];
        [UIView commitAnimations];
    }
}
